name: Agent Structure Check

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'docs/**'
      - 'security/**'
      - '.github/**'
  push:
    branches: [ master, main ]
    paths:
      - 'docs/**'
      - 'security/**'
      - '.github/**'
  schedule:
    - cron: '0 3 * * 1' # Weekly drift check (Mon 03:00 UTC)
  workflow_call: {}

permissions:
  contents: read

concurrency:
  group: agent-structure-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  structure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify required files exist
        shell: bash
        run: |
          set -euo pipefail
          LC_ALL=C
          missing=0
          echo "Checking required documentation structure files..."
          require_one_of() {
            local ok=1
            for f in "$@"; do
              if [[ -f "$f" ]]; then
                echo "OK (one-of): $f"
                ok=0
                break
              fi
            done
            if [[ $ok -ne 0 ]]; then
              printf "::error file=%s::Missing required file (one of set)\n" "$1"
              for f in "$@"; do echo "  - $f"; done
              missing=1
            fi
          }

          req=(
            "docs/_templates/page.md"
            "docs/instructions.md"
            "docs/instructions.json"
            "docs/STYLE_GUIDE.md"
            "docs/REVIEW_PROCESS.md"
            "docs/stakeholders/README.md"
            "docs/architecture/index.md"
          )
          for f in "${req[@]}"; do
            if [[ ! -f "$f" ]]; then
              printf "::error file=%s::Missing required file\n" "$f"
              missing=1
            else
              echo "OK: $f"
            fi
          done

          # One-of check for GitHub instructions filename variants
          require_one_of ".github/instructions-github.md" ".github/copilot-instructions.md"

          echo "Checking additional recommended structure files (non-blocking for now)..."
          rec=(
            "docs/MAINTENANCE.md"
            "docs/METRICS.md"
            "docs/user-guides/README.md"
          )
          for f in "${rec[@]}"; do
            if [[ ! -f "$f" ]]; then
              printf "::warning file=%s::Recommended file missing (tracked via issues)\n" "$f"
            else
              echo "OK (recommended): $f"
            fi
          done

          echo "Checking optional (non-blocking) files referenced by instructions..."
          opt=(
            "security/policies/security-policy.md"
            "security/policies/access-control.md"
            "docs/architecture/security/threat-model.md"
          )
          for f in "${opt[@]}"; do
            if [[ ! -f "$f" ]]; then
              printf "::warning file=%s::Suggested file missing (non-blocking)\n" "$f"
            else
              echo "OK (optional): $f"
            fi
          done

          if [[ "$missing" -ne 0 ]]; then
            echo "Required files missing"
            exit 1
          fi

      - name: Check empty critical directories (non-blocking)
        shell: bash
        run: |
          set -euo pipefail
          LC_ALL=C
          echo "Scanning for empty critical directories..."
          dirs=(
            "docs/operations/maintenance"
            "docs/operations/incident-response"
            "docs/user-guides"
          )
          for d in "${dirs[@]}"; do
            if [[ -d "$d" ]]; then
              if [[ -z "$(find "$d" -maxdepth 1 -type f -print -quit)" ]]; then
                printf "::warning file=%s::Directory exists but has no files (add README.md or content)\n" "$d"
              else
                echo "OK (has files): $d"
              fi
            else
              printf "::warning file=%s::Directory missing (non-blocking)\n" "$d"
            fi
          done

      - name: Guard against placeholder language
        shell: bash
        run: |
          set -euo pipefail
          LC_ALL=C
          echo "Checking for placeholder/template language..."
          pattern='PLACEHOLDER|\bTBD\b|TO BE FILLED|Lorem ipsum|\bWIP\b|<insert|coming soon'
          matches=$(grep -RInE "$pattern" docs/ security/ || true)
          if [[ -n "${matches:-}" ]]; then
            echo "$matches" | sed 's/^/match: /'
            count=$(echo "$matches" | wc -l | tr -d ' ')
            printf "::error ::Placeholder or template language detected in docs/security (%s hits); please replace with grounded content.\n" "$count"
            exit 1
          fi

      - name: Write summary
        if: always()
        shell: bash
        run: |
          {
            echo "## Agent Structure Check"
            echo
            if [[ "${{ job.status }}" == "success" ]]; then
              echo "Status: ✅ Passed"
            else
              echo "Status: ❌ Failed"
            fi
            echo
            echo "- Trigger: ${{ github.event_name }}"
            echo "- Ref: ${{ github.ref }}"
            echo "- Commit: ${{ github.sha }}"
            echo
            echo "Tips:"
            echo "- Keep docs grounded (no placeholders)."
            echo "- Ensure one of .github/instructions-github.md or .github/copilot-instructions.md exists."
            echo "- Add missing recommended files as follow-up issues."
          } >> "$GITHUB_STEP_SUMMARY"
