name: Frontend Web CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/web/**'
      - 'frontend/shared/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/web/**'
      - 'frontend/shared/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          scan-ref: ./frontend/web

      - name: Security audit
        run: |
          cd frontend/web
          npm audit --audit-level high

  quality-checks:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    needs: security-scan
    if: ${{ needs.security-scan.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend/web
          pnpm install --frozen-lockfile

      - name: Type checking
        run: |
          cd frontend/web
          pnpm type-check

      - name: Linting
        run: |
          cd frontend/web
          pnpm lint

      - name: Unit tests
        run: |
          cd frontend/web
          pnpm test:unit --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/web/coverage/lcov.info
          flags: frontend-web

  accessibility-audit:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    if: ${{ needs.quality-checks.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend/web
          pnpm install --frozen-lockfile

      - name: Build application
        run: |
          cd frontend/web
          pnpm build:staging

      - name: Accessibility audit
        run: |
          cd frontend/web
          pnpm a11y:audit

  performance-audit:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    if: ${{ needs.quality-checks.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend/web
          pnpm install --frozen-lockfile

      - name: Build application
        run: |
          cd frontend/web
          pnpm build:staging

      - name: Lighthouse CI
        run: |
          cd frontend/web
          pnpm lighthouse:ci

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [accessibility-audit, performance-audit]
    if: ${{ needs.accessibility-audit.result == 'success' && needs.performance-audit.result == 'success' }}
    strategy:
      matrix:
        environment: [development, staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend/web
          pnpm install --frozen-lockfile

      - name: Build application
        run: |
          cd frontend/web
          pnpm build:${{ matrix.environment }}

      - name: Build Docker image
        run: |
          cd frontend/web
          docker build -t merajutasa-web:${{ github.sha }}-${{ matrix.environment }} .

      - name: Save Docker image
        run: |
          docker save merajutasa-web:${{ github.sha }}-${{ matrix.environment }} | gzip > web-${{ matrix.environment }}.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ matrix.environment }}
          path: |
            frontend/web/dist/
            web-${{ matrix.environment }}.tar.gz

  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: merajutasa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend/web
          pnpm install --frozen-lockfile

      - name: Run integration tests
        run: |
          cd frontend/web
          pnpm test:integration
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/merajutasa_test

  e2e-tests:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend/web
          pnpm install --frozen-lockfile

      - name: Install Playwright
        run: |
          cd frontend/web
          pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd frontend/web
          pnpm test:e2e

      - name: Upload E2E test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: frontend/web/test-results/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    environment: staging
    steps:
      - name: Preflight – staging env
        id: preflight_stg
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
        run: |
          if [ -z "${STAGING_URL:-}" ]; then
            echo "::notice ::Skipping deploy: STAGING_URL is not set in staging environment secrets"
            echo "can_deploy=false" >> "$GITHUB_OUTPUT"
          else
            echo "can_deploy=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Download build artifacts
        if: steps.preflight_stg.outputs.can_deploy == 'true'
        uses: actions/download-artifact@v4
        with:
          name: web-build-staging

      - name: Deploy to staging
        if: steps.preflight_stg.outputs.can_deploy == 'true'
        run: |
          echo "Deploying to staging environment at: ${{ secrets.STAGING_URL }}"

      - name: Run smoke tests
        if: steps.preflight_stg.outputs.can_deploy == 'true'
        run: |
          echo "Running staging smoke tests"

      - name: Notify stakeholders
        if: always()
        run: |
          echo "Sending deployment notification to stakeholders"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment: production
    steps:
      - name: Preflight – production env
        id: preflight_prod
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          if [ -z "${PRODUCTION_URL:-}" ]; then
            echo "::notice ::Skipping deploy: PRODUCTION_URL is not set in production environment secrets"
            echo "can_deploy=false" >> "$GITHUB_OUTPUT"
          else
            echo "can_deploy=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Download build artifacts
        if: steps.preflight_prod.outputs.can_deploy == 'true'
        uses: actions/download-artifact@v4
        with:
          name: web-build-production

      - name: Blue-Green Deployment
        if: steps.preflight_prod.outputs.can_deploy == 'true'
        run: |
          echo "Performing blue-green deployment to production at: ${{ secrets.PRODUCTION_URL }}"

      - name: Health checks
        if: steps.preflight_prod.outputs.can_deploy == 'true'
        run: |
          echo "Running production health checks"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back deployment"

      - name: Notify stakeholders
        if: always()
        run: |
          echo "Sending production deployment notification"

  child-safety-compliance:
    name: Child Safety Compliance Check
    runs-on: ubuntu-latest
    needs: [e2e-tests, integration-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Basic child safety compliance checks
        run: |
          echo "Running child safety compliance checks"
          echo "Reference: docs/api/architecture/compliance/security-controls.md"
          # Add concrete checks here in future PRs (e.g., scanning docs for prohibited PII patterns)
